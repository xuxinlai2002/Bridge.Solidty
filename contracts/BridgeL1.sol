// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;


import "./Bridge.sol";
import "hardhat/console.sol";

/**
    @title Facilitates deposits, creation and votiing of deposit proposals, and deposit executions.
    @author ChainSafe Systems.
 */
contract BridgeL1 is Bridge {
    
    /**
        @notice Initiates a transfer using a specified handler contract.
        @notice Only callable when Bridge is not paused.
        @param destinationChainID ID of chain deposit will be bridged to.
        @param resourceID ResourceID used to find address of handler to be used for deposit.
        @param data Additional data to be passed to specified handler.
     */
    function deposit(
        uint8 destinationChainID,
        bytes32 resourceID,
        bytes calldata data
    ) external payable {

        console.log("sol xxl deposit ...");

        address handler = _resourceIDToHandlerAddress[resourceID];
        require(handler != address(0), "resourceID not mapped to handler");
     
        uint64 depositNonce = ++_depositCounts[destinationChainID];
        _depositRecords[depositNonce][destinationChainID] = data;
        IDepositExecute depositHandler = IDepositExecute(handler);

        //weth layer1 -> layer2
        if(depositHandler.getType() == IDepositExecute.HandleTypes.WETH) {
            console.log("sol xxl deposit weth ...");
            _depoistWeth(destinationChainID,resourceID,data,handler,depositNonce);
        //erc20 layer1 -> layer2 
        }else if(depositHandler.getType() == IDepositExecute.HandleTypes.ERC20){
            console.log("sol xxl deposit erc20 ...");
            _depoistERC20(destinationChainID,resourceID,data,handler,depositNonce,true);
        }else if(depositHandler.getType() == IDepositExecute.HandleTypes.ERC721){
            console.log("sol xxl deposit erc721 ...");
            _depoistERC721(destinationChainID,resourceID,data,handler,depositNonce,true);
        }else { 
            //TODO other
        } 
    }

    /**
        @notice Executes a deposit proposal that is considered passed using a specified handler contract.
        @notice Only callable by relayers when Bridge is not paused.
        @param chainID ID of chain deposit originated from.
        @param resourceID ResourceID to be used when making deposits.
        @param depositNonce ID of deposited generated by origin Bridge contract.
        @param data Data originally provided when deposit was made.
        @param sig signature for abiter.
        @notice Proposal must have Passed status.
        @notice Hash of {data} must equal proposal's {dataHash}.
        @notice Emits {ProposalEvent} event with status {Executed}.
     */
    function executeProposalBatch(
        uint8 chainID,
        uint64[] memory depositNonce,
        bytes[] calldata data,
        bytes32[] memory resourceID,
        bytes[] memory sig,
        bytes memory superSig
    ) public {
        _verifyBatch(chainID, depositNonce, data, resourceID, sig,superSig);
        _excuteBatch(chainID, depositNonce, data, resourceID,block.coinbase);
    }


}
